
//---------------------------------------------
//Vertex Shader Input
//---------------------------------------------
struct VS_INPUT
{
	float4 Position	:	POSITION;
	float3 Normal	:	NORMAL;
	float3 Tangent	:	TANGENT;
	float2 uv0		:	TEXCOORD0;

	float4 m01		:	TEXCOORD1;
	float4 m23		:	TEXCOORD2;
};

#include "InstancingVertexInterpolators.cg"

//---------------------------------------------
//Main Vertex Shader
//---------------------------------------------
VS_OUTPUT main_vs( in VS_INPUT input,
				   uniform float4x4 viewProjMatrix,

				   uniform sampler2D matrixTexture : register(s1) )
{
	VS_OUTPUT output;

	float3x4 worldMatrix;
	worldMatrix[0] = tex2D( matrixTexture, input.m01.xy );
	worldMatrix[1] = tex2D( matrixTexture, input.m01.zw );
	worldMatrix[2] = tex2D( matrixTexture, input.m23.xy );

	float4 worldPos = float4( mul( worldMatrix, input.Position ).xyz, 1.0f );
	float3 worldNorm= mul( (float3x3)(worldMatrix), input.Normal );

	//Transform the position
	output.Position		= mul( viewProjMatrix, worldPos );
	output.ps.uv0		= input.uv0;
	output.ps.Normal	= mul( (float3x3)(viewProjMatrix), normalize(worldNorm) );
	output.ps.vPos		= worldPos;

	return output;
}
