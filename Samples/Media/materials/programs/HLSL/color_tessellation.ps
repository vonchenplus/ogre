Texture2D g_baseTexture0 : register( t0 );
SamplerState g_samLinear0 : register( s0 );

Texture2D g_baseTexture1 : register( t1 );
SamplerState g_samLinear1 : register( s1 );

cbuffer LightBuffer
{
    float4 lightAmbientColor;
	float4 lightDiffuseColor;
    float4 lightSpecularColor;
    float3 lightDirection;
	float4 lightPosition;
	float4 lightAttenuation;
	float4 surfaceDiffuseColour;
	float4 surfaceSpecularColour;
	float  surfaceShininess;
	float3 cameraPosition;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 texCoord : TEXCOORD0;
    float3 normal 	: TEXCOORD1;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 color_tessellation_ps(PixelInputType input) : SV_TARGET
{
	float4 color;
	float lightIntensity;

	float4 texColor = g_baseTexture0.Sample( g_samLinear0, input.texCoord );
    
	lightIntensity =  saturate(dot(input.normal, lightDirection));
	
	color = saturate(surfaceDiffuseColour * lightIntensity);
	color = color * texColor * lightDiffuseColor;
		
	return color;
}
