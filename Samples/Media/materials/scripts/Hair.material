GeometryShader gsSOAddAngularForces = ConstructGSWithSO( CompileShader( gs_4_0, AddAngularForcesGS() ), "POSITION.xyzw" );  
GeometryShader gsSOIntegrate = ConstructGSWithSO( CompileShader( vs_4_0, addForcesAndIntegrateVSG() ), "POSITION.xyzw" );  
GeometryShader gsSOSatisfySpringConstraints = ConstructGSWithSO( CompileShader( gs_4_0, SatisfySpringConstraintsGS() ), "POSITION.xyzw" );  
GeometryShader gsSOSatisfyAngularSpringConstraints = ConstructGSWithSO( CompileShader( gs_4_0, SatisfyAngularSpringConstraintsGS() ), "POSITION.xyzw" );  
GeometryShader gsSOSatisfyCollisionConstraints = ConstructGSWithSO( CompileShader( vs_4_0, SatisfyCollisionConstraintsVSG() ), "POSITION.xyzw" );  
GeometryShader gsSOUpdateCoordinateFrames = ConstructGSWithSO( CompileShader( vs_4_0, UpdateCoordinateFrameVSG() ), "X_AXIS.xyzw;Y_AXIS.xyzw;Z_AXIS.xyzw" );  
GeometryShader gsSOPropagateCoordinateFrames = ConstructGSWithSO( CompileShader( vs_4_0, PropagateCoordinateFrameVSG() ), "X_AXIS.xyzw;Y_AXIS.xyzw;Z_AXIS.xyzw" );  
GeometryShader gsSORestoreToDefaultPositions = ConstructGSWithSO( CompileShader( vs_4_0, restoreToDefaultPositionsVSG() ), "POSITION.xyzw" );  

vertex_program Ogre/Hair/AddAngularForcesVS hlsl
{
	source Hair.hlsl
	entry_point AddAngularForcesVS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/AddAngularForcesGS hlsl
{
	source Hair.hlsl
	entry_point AddAngularForcesGS
	target gs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/addForcesAndIntegrateVS hlsl
{
	source Hair.hlsl
	entry_point addForcesAndIntegrateVS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/addForcesAndIntegrateVSG hlsl
{
	source Hair.hlsl
	entry_point addForcesAndIntegrateVS
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/SatisfySpringConstraintsVS hlsl
{
	source Hair.hlsl
	entry_point SatisfySpringConstraintsGS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/SatisfySpringConstraintsGS hlsl
{
	source Hair.hlsl
	entry_point SatisfySpringConstraintsGS
	target gs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/SatisfyAngularSpringConstraintsVS hlsl
{
	source Hair.hlsl
	entry_point SatisfyAngularSpringConstraintsGS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/SatisfyAngularSpringConstraintsGS hlsl
{
	source Hair.hlsl
	entry_point SatisfyAngularSpringConstraintsGS
	target gs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/SatisfyCollisionConstraintsVS hlsl
{
	source Hair.hlsl
	entry_point SatisfyCollisionConstraintsVS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/SatisfyCollisionConstraintsVSG hlsl
{
	source Hair.hlsl
	entry_point SatisfyCollisionConstraintsVS
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/UpdateCoordinateFrameVS hlsl
{
	source Hair.hlsl
	entry_point UpdateCoordinateFrameVS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/UpdateCoordinateFrameVSG hlsl
{
	source Hair.hlsl
	entry_point UpdateCoordinateFrameVS
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/PropagateCoordinateFrameVS hlsl
{
	source Hair.hlsl
	entry_point PropagateCoordinateFrameVS
	target vs_4_0
	
	default_params
	{

	}	
}


geometry_program Ogre/Hair/PropagateCoordinateFrameVSG hlsl
{
	source Hair.hlsl
	entry_point PropagateCoordinateFrameVS
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/restoreToDefaultPositionsVS hlsl
{
	source Hair.hlsl
	entry_point restoreToDefaultPositionsVS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/restoreToDefaultPositionsVSG hlsl
{
	source Hair.hlsl
	entry_point restoreToDefaultPositionsVS
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/RenderCoordinateFrameVSUnTess hlsl
{
	source Hair.hlsl
	entry_point RenderCoordinateFrameVSUnTess
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/RenderCoordinateFrameVSUnTessSB hlsl
{
	source Hair.hlsl
	entry_point RenderCoordinateFrameVSUnTessSB
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/RenderCoordinateFrameVS hlsl
{
	source Hair.hlsl
	entry_point RenderCoordinateFrameVS
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/RenderCoordinateFrameGSUnTessellated hlsl
{
	source Hair.hlsl
	entry_point RenderCoordinateFrameGSUnTessellated
	target gs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/RenderCoordinateFrameGSUnTessellatedSB hlsl
{
	source Hair.hlsl
	entry_point RenderCoordinateFrameGSUnTessellatedSB
	target gs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/RenderCoordinateFrameGSTessellated hlsl
{
	source Hair.hlsl
	entry_point RenderCoordinateFrameGSTessellated
	target gs_4_0
	
	default_params
	{

	}	
}

fragment_program Ogre/Hair/RenderCoordinateFramePS hlsl
{
	source Hair.hlsl
	entry_point restoreToDefaultPositionsVS
	target ps_4_0
	
	default_params
	{

	}	
}




material Ogre/Hair/SimulateHair
{
	technique SimulateHair
	{
		pass addAngularForces
		{
			vertex_program_ref Ogre/Hair/AddAngularForcesVS
			{
			
			}
			geometry_program_ref Ogre/Hair/AddAngularForcesGS
			{
			
			}
			depth_check off
			depth_write off
		}
		pass addForcesAndIntegrate
		{
			vertex_program_ref Ogre/Hair/addForcesAndIntegrateVS
			{
			
			}
			geometry_program_ref Ogre/Hair/addForcesAndIntegrateVSG
			{
			
			}
			depth_check off
			depth_write off
		}
		pass SatisfySpringConstraints
		{
			vertex_program_ref Ogre/Hair/SatisfySpringConstraintsVS
			{
			
			}
			geometry_program_ref Ogre/Hair/SatisfySpringConstraintsGS
			{
			
			}
			depth_check off
			depth_write off
		}
		pass SatisfyAngularSpringConstraints
		{
			vertex_program_ref Ogre/Hair/SatisfyAngularSpringConstraintsVS
			{
			
			}
			geometry_program_ref Ogre/Hair/SatisfyAngularSpringConstraintsGS
			{
			
			}
			depth_check off
			depth_write off
		}
		pass SatisfyCollisionConstraints
		{
			vertex_program_ref Ogre/Hair/SatisfyCollisionConstraintsVS
			{
			
			}
			geometry_program_ref Ogre/Hair/SatisfyCollisionConstraintsVSG
			{
			
			}
			depth_check off
			depth_write off
		}
		pass restoreToDefaultPositions
		{
			vertex_program_ref Ogre/Hair/restoreToDefaultPositionsVS
			{
			
			}
			geometry_program_ref Ogre/Hair/restoreToDefaultPositionsVSG
			{
			
			}
			depth_check off
			depth_write off
		}
		pass RenderCoordinateFrameUnTessellated
		{
			vertex_program_ref Ogre/Hair/RenderCoordinateFrameVSUnTess
			{
			
			}
			geometry_program_ref Ogre/Hair/RenderCoordinateFrameGSUnTessellated
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderCoordinateFramePS
			{
			
			}
		
			depth_check on
			depth_write on
		}
		pass RenderCoordinateFrameUnTessellatedSB
		{
			vertex_program_ref Ogre/Hair/RenderCoordinateFrameVSUnTessSB
			{
			
			}
			geometry_program_ref Ogre/Hair/RenderCoordinateFrameGSUnTessellatedSB
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderCoordinateFramePS
			{
			
			}
		
			depth_check on
			depth_write on
		}
		pass RenderCoordinateFrameTessellated
		{
			vertex_program_ref Ogre/Hair/RenderCoordinateFrameVS
			{
			
			}
			geometry_program_ref Ogre/Hair/RenderCoordinateFrameGSTessellated
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderCoordinateFramePS
			{
			
			}
		
			depth_check on
			depth_write on
		}
		pass UpdateCoordinateFrame
		{
			vertex_program_ref Ogre/Hair/UpdateCoordinateFrameVS
			{
			
			}
			geometry_program_ref Ogre/Hair/UpdateCoordinateFrameVSG
			{
			
			}
		
			depth_check off
			depth_write off
		}
		pass PropagateCoordinateFrame
		{
			vertex_program_ref Ogre/Hair/PropagateCoordinateFrameVS
			{
			
			}
			geometry_program_ref Ogre/Hair/PropagateCoordinateFrameVSG
			{
			
			}
		
			depth_check off
			depth_write off
		}
	}
}

vertex_program Ogre/Hair/InterpolateVS_DUMMY11
{
	source Hair.hlsl
	entry_point InterpolateVS_DUMMY11
	target vs_5_0
	
	default_params
	{
	
	}
}

vertex_program Ogre/Hair/InterpolateVSMultiStrand_LOAD
{
	source Hair.hlsl
	entry_point InterpolateVSMultiStrand_LOAD
	target vs_5_0
	
	default_params
	{
	
	}
}

vertex_program Ogre/Hair/InterpolateVSMultiStrandDepthShadows_LOAD
{
	source Hair.hlsl
	entry_point InterpolateVSMultiStrandDepthShadows_LOAD
	target vs_5_0
	
	default_params
	{
	
	}
}

vertex_program Ogre/Hair/InterpolateVSMultiStrandCollisions
{
	source Hair.hlsl
	entry_point InterpolateVSMultiStrandCollisions
	target vs_5_0
	
	default_params
	{
	
	}
}

tesselation_hull_program Ogre/Hair/InterpolateHSMultiStrand
{
	source Hair.hlsl
	entry_point InterpolateHSMultiStrand
	target hs_5_0
	
	default_params
	{
	
	}
}

tesselation_hull_program Ogre/Hair/InterpolateHSMultiStrandDepth
{
	source Hair.hlsl
	entry_point InterpolateHSMultiStrandDepth
	target hs_5_0
	
	default_params
	{
	
	}
}

tesselation_hull_program Ogre/Hair/InterpolateHSMultiStrandCollisions
{
	source Hair.hlsl
	entry_point InterpolateHSMultiStrandCollisions
	target hs_5_0
	
	default_params
	{
	
	}
}

tesselation_domain_program Ogre/Hair/InterpolateDSMultiStrand
{
	source Hair.hlsl
	entry_point InterpolateDSMultiStrand
	target ds_5_0
	
	default_params
	{
	
	}
}

tesselation_domain_program Ogre/Hair/InterpolateDSMultiStrandDepth
{
	source Hair.hlsl
	entry_point InterpolateDSMultiStrandDepth
	target ds_5_0
	
	default_params
	{
	
	}
}

tesselation_domain_program Ogre/Hair/InterpolateDSMultiStrandCollisions
{
	source Hair.hlsl
	entry_point InterpolateDSMultiStrandCollisions
	target ds_5_0
	
	default_params
	{
	
	}
}

geometry_program Ogre/Hair/InterpolateGS
{
	source Hair.hlsl
	entry_point InterpolateGS
	target gs_5_0
	
	default_params
	{
	
	}
}

geometry_program Ogre/Hair/InterpolateGSDepthShadows
{
	source Hair.hlsl
	entry_point InterpolateGSDepthShadows
	target gs_5_0
	
	default_params
	{
	
	}
}

geometry_program Ogre/Hair/InterpolateGSMultiStrandCollisions
{
	source Hair.hlsl
	entry_point InterpolateGSMultiStrandCollisions
	target gs_5_0
	
	default_params
	{
	
	}
}

fragment_program Ogre/Hair/RenderPS
{
	source Hair.hlsl
	entry_point RenderPS
	target ps_5_0
	
	default_params
	{
	
	}
}

fragment_program Ogre/Hair/RenderDepthPSSmall
{
	source Hair.hlsl
	entry_point RenderDepthPSSmall
	target ps_5_0
	
	default_params
	{
	
	}
}

fragment_program Ogre/Hair/InterpolatePSMultiStrandCollisions
{
	source Hair.hlsl
	entry_point InterpolatePSMultiStrandCollisions
	target ps_5_0
	
	default_params
	{
	
	}
}

fragment_program Ogre/Hair/RenderDepthPSSmall_DOM
{
	source Hair.hlsl
	entry_point RenderDepthPSSmall_DOM
	target ps_5_0
	
	default_params
	{
	
	}
}

vertex_program Ogre/Hair/TessellateVSBSplinePassThrough hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplinePassThrough
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/TessellateVSBSplineCFs hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineCFs
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/TessellateVSBSplineSBCFs hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineSBCFs
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/TessellateVSBSplineLengths hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineLengths
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSMultiStrand_SO hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSMultiStrand_SO
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSSingleStrand_SO hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSMultiStrand_SO
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSDepthPrepass hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSDepthPrepass
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSDepthPrepass_LOAD hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSDepthPrepass_LOAD
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSMultiStrand hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSMultiStrand
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSClumpDepthPrepass hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSClumpDepthPrepass
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSClumpDepthPrepass_LOAD hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSClumpDepthPrepass_LOAD
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSSingleStrand hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSSingleStrand
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSSingleStrand_LOAD hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSSingleStrand_LOAD
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVSMCollisions hlsl
{
	source Hair.hlsl
	entry_point InterpolateVSMCollisions
	target vs_4_0
	
	default_params
	{

	}	
}

vertex_program Ogre/Hair/InterpolateVS2Grid hlsl
{
	source Hair.hlsl
	entry_point InterpolateVS2Grid
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/TessellateGSBSpline hlsl
{
	source Hair.hlsl
	entry_point TessellateGSBSpline
	target gs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/TessellateGSBSplineSB hlsl
{
	source Hair.hlsl
	entry_point TessellateGSBSplineSB
	target gs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/TessellateVSBSplineCFsG hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineCFs
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/TessellateVSBSplineSBCFsG hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineCFs
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/TessellateVSBSplineLengthsG hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineCFs
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/InterpolateVSMultiStrand_SOG hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineCFs
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/InterpolateVSSingleStrand_SOG hlsl
{
	source Hair.hlsl
	entry_point TessellateVSBSplineCFs
	target vs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/InterpolateGSDepthPrepass hlsl
{
	source Hair.hlsl
	entry_point InterpolateGSDepthPrepass
	target gs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/InterpolateGSMCollisions hlsl
{
	source Hair.hlsl
	entry_point InterpolateGSMCollisions
	target gs_4_0
	
	default_params
	{

	}	
}

geometry_program Ogre/Hair/InterpolateGS2Grid hlsl
{
	source Hair.hlsl
	entry_point InterpolateGS2Grid
	target gs_4_0
	
	default_params
	{

	}	
}

tesselation_hull_program Ogre/Hair/InterpolateHSSingleStrand hlsl
{
	source Hair.hlsl
	entry_point InterpolateHSSingleStrand
	target hs_5_0
	
	default_params
	{

	}	
}

tesselation_domain_program Ogre/Hair/InterpolateDSSingleStrand_DEPTH hlsl
{
	source Hair.hlsl
	entry_point InterpolateHSSingleStrand
	target ds_5_0
	
	default_params
	{

	}	
}

tesselation_domain_program Ogre/Hair/InterpolateDSSingleStrand_NORMAL hlsl
{
	source Hair.hlsl
	entry_point InterpolateDSSingleStrand_NORMAL
	target ds_5_0
	
	default_params
	{

	}	
}

fragment_program Ogre/Hair/RenderPSDepthPrepass hlsl
{
	source Hair.hlsl
	entry_point RenderPSDepthPrepass
	target ps_4_0
	
	default_params
	{

	}	
}

fragment_program Ogre/Hair/InterpolatePSMCollisions hlsl
{
	source Hair.hlsl
	entry_point InterpolatePSMCollisions
	target ps_4_0
	
	default_params
	{

	}	
}

fragment_program Ogre/Hair/RenderPSForGridMRT hlsl
{
	source Hair.hlsl
	entry_point RenderPSForGridMRT
	target ps_4_0
	
	default_params
	{

	}	
}

material Ogre/Hair/RenderHair
{
	technique RenderHair
	{
		//hardwareTessellation passes for multistrand interpolation  ------------------------------------------------
		pass InterpolateAndRenderM_HardwareTess
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSMultiStrand
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSMultiStrand
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPS
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		pass InterpolateInstancedVS_LOAD
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMultiStrand_LOAD
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPS
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}  
		pass InterpolateAndRenderDepth_HardwareTess
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSMultiStrandDepth
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSMultiStrandDepth
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthShadows
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderDepthPSSmall
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}

		pass InterpolateAndRenderDepth_HardwareTess_DOM
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSMultiStrandDepth
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSMultiStrandDepth
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthShadows
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderDepthPSSmall_DOM
			{
			
			}

			scene_blend add
			scene_blend_op min
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}

		pass InterpolateInstancedDepthVS_LOAD
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMultiStrandDepthShadows_LOAD
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthShadows
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderDepthPSSmall
			{
			
			}

			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}

		pass InterpolateInstancedDepthVS_LOAD_DOM
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMultiStrandDepthShadows_LOAD
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthShadows
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderDepthPSSmall_DOM
			{
			
			}

			scene_blend add
			scene_blend_op min
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}

		 pass InterpolateAndRenderCollisions_HardwareTess
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSMultiStrandCollisions
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSMultiStrandCollisionsWithGS
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSMultiStrandCollisions
			{
			
			}
			fragment_program_ref Ogre/Hair/InterpolatePSMultiStrandCollisions
			{
			
			}

			scene_blend add
			scene_blend_op min
			depth_check off
			depth_write off
			cull_hardware none
			cull_software none
		}   
		pass InterpolateInstancedBaryCentricCollisions
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMultiStrandCollisions
			{
			
			}
			fragment_program_ref Ogre/Hair/InterpolatePSMultiStrandCollisions
			{
			
			}

			scene_blend add
			scene_blend_op min
			depth_check off
			depth_write off
			cull_hardware none
			cull_software none
		}      
		
		//tessellation
		pass Tessellate
		{
			vertex_program_ref Ogre/Hair/TessellateVSBSplinePassThrough
			{
			
			}
			geometry_program_ref Ogre/Hair/TessellateGSBSpline
			{
			
			}
			depth_check off
			depth_write off
		}
		pass TessellateSB
		{
			vertex_program_ref Ogre/Hair/TessellateVSBSplinePassThrough
			{
			
			}
			geometry_program_ref Ogre/Hair/TessellateGSBSplineSB
			{
			
			}
			depth_check off
			depth_write off
		}
		
		pass TessellateCoordinateFrames
		{
			vertex_program_ref Ogre/Hair/TessellateVSBSplineCFs
			{
			
			}
			geometry_program_ref Ogre/Hair/TessellateVSBSplineCFsG
			{
			
			}
			depth_check off
			depth_write off	
		}
		
		pass TessellateCoordinateFramesSB
		{
			vertex_program_ref Ogre/Hair/TessellateVSBSplineSBCFs
			{
			
			}
			geometry_program_ref Ogre/Hair/TessellateVSBSplineSBCFsG
			{
			
			}
			depth_check off
			depth_write off
		}
		
		pass TessellateLengths
		{
			vertex_program_ref Ogre/Hair/TessellateVSBSplineLengths
			{
			
			}
			geometry_program_ref Ogre/Hair/TessellateVSBSplineLengthsG
			{
			
			}

			depth_check off
			depth_write off
		}
		   
		//streamout the attributes-----------------------------------------------------
		pass SO_M_Attributes
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMultiStrand_SO
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateVSMultiStrand_SOG
			{
			
			}

			depth_check off
			depth_write off	
		}
		pass SO_S_Attributes
		{
			vertex_program_ref Ogre/Hair/InterpolateVSSingleStrand_SO
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateVSSingleStrand_SOG
			{
			
			}

			depth_check off
			depth_write off  
		}
		pass InterpolateInstancedDepthVSSingleStrand11
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSSingleStrand
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSSingleStrand_DEPTH
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthShadows
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderDepthPSSmall
			{
			
			}

			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		pass InterpolateInstancedDepthVSSingleStrand11_DOM
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSSingleStrand
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSSingleStrand_DEPTH
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthShadows
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderDepthPSSmall_DOM
			{
			
			}

			scene_blend add
			scene_blend_op min
			depth_check off
			depth_write off
			cull_hardware none
			cull_software none
		}
		pass InterpolateAndRenderS_HardwareTess
		{
			vertex_program_ref Ogre/Hair/InterpolateVS_DUMMY11
			{
			
			}
			
			tesselation_hull_program_ref Ogre/Hair/InterpolateHSSingleStrand
			{
			
			}
			
			tesselation_domain_program_ref Ogre/Hair/InterpolateDSSingleStrand_NORMAL
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPS
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}

		//normal rendering
		pass InterpolateInstancedDepthPrepassVS
		{
			vertex_program_ref Ogre/Hair/InterpolateVSDepthPrepass
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthPrepass
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPSDepthPrepass
			{
			
			}

			alpha_to_coverage on
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}    
		pass InterpolateInstancedDepthPrepassVS_LOAD
		{
			vertex_program_ref Ogre/Hair/InterpolateVSDepthPrepass_LOAD
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthPrepass
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPSDepthPrepass
			{
			
			}

			alpha_to_coverage on
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		
		pass InterpolateInstancedVS
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMultiStrand
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPS
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}

		
		pass InterpolateInstancedVSSingleStrandDepthPrepass
		{
			vertex_program_ref Ogre/Hair/InterpolateVSClumpDepthPrepass
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthPrepass
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPSDepthPrepass
			{
			
			}

			alpha_to_coverage on
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		pass InterpolateInstancedVSSingleStrandDepthPrepass_LOAD
		{
			vertex_program_ref Ogre/Hair/InterpolateVSClumpDepthPrepass_LOAD
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSDepthPrepass
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPSDepthPrepass
			{
			
			}

			alpha_to_coverage on
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		
		pass InterpolateInstancedVSSingleStrand
		{
			vertex_program_ref Ogre/Hair/InterpolateVSSingleStrand
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPS
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		pass InterpolateInstancedVSSingleStrand_LOAD
		{
			vertex_program_ref Ogre/Hair/InterpolateVSSingleStrand_LOAD
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPS
			{
			
			}

			scene_blend alpha_blend
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		
		//density rendering

		pass InterpolateInstancedVSRenderCollisionsNormal
		{
			vertex_program_ref Ogre/Hair/InterpolateVSMCollisions
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGSMCollisions
			{
			
			}
			fragment_program_ref Ogre/Hair/InterpolatePSMCollisions
			{
			
			}

			depth_check on
			depth_write on
			cull_hardware none
			cull_software none 
		} 
	   
		pass InterpolateInstancedVSForGrid3DTextureMRT
		{
			vertex_program_ref Ogre/Hair/InterpolateVS2Grid
			{
			
			}
			geometry_program_ref Ogre/Hair/InterpolateGS2Grid
			{
			
			}
			fragment_program_ref Ogre/Hair/RenderPSForGridMRT
			{
			
			}
			scene_blend add
			depth_check on
			depth_write on
			cull_hardware none
			cull_software none
		}
		
		/*
		//next passes are for shadows--------------------------------------------------------------
		pass InterpolateInstancedDepthVS
		{
			SetVertexShader(CompileShader(vs_4_0, InterpolateVSBMultiStrandDepthShadows()));
			SetGeometryShader(CompileShader(gs_4_0, InterpolateGSDepthShadows()));
			SetPixelShader(CompileShader(ps_4_0, RenderDepthPSSmall()));        
			SetDepthStencilState(DepthTest, 0);
			SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
			SetRasterizerState(SolidNoCull);
		}

		pass InterpolateInstancedDepthVS_DOM
		{
			SetVertexShader(CompileShader(vs_4_0, InterpolateVSBMultiStrandDepthShadows()));
			SetGeometryShader(CompileShader(gs_4_0, InterpolateGSDepthShadows()));
			SetPixelShader(CompileShader(ps_4_0, RenderDepthPSSmall_DOM()));        
			SetDepthStencilState(NoDepthStencilTest, 0);
			SetRasterizerState(SolidNoCull);
			SetBlendState( BlendingAdd_BS, float4( 1.0f, 1.0f, 1.0f, 0.0f ), 0xffffffff );
		}

		pass InterpolateInstancedDepthVSSingleStrand
		{
			SetVertexShader(CompileShader(vs_4_0, InterpolateVSSingleStrandDepthShadows()));
			SetGeometryShader(CompileShader(gs_4_0, InterpolateGSDepthShadows()));
			SetPixelShader(CompileShader(ps_4_0, RenderDepthPSSmall()));
			SetDepthStencilState(DepthTest, 0);
			SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
			SetRasterizerState(SolidNoCull);
		}

		pass InterpolateInstancedDepthVSSingleStrand_DOM
		{
			SetVertexShader(CompileShader(vs_4_0, InterpolateVSSingleStrandDepthShadows()));
			SetGeometryShader(CompileShader(gs_4_0, InterpolateGSDepthShadows()));
			SetPixelShader(CompileShader(ps_4_0, RenderDepthPSSmall_DOM()));
			SetDepthStencilState(NoDepthStencilTest, 0);
			SetRasterizerState(SolidNoCull);
			SetBlendState( BlendingAdd_BS, float4( 1.0f, 1.0f, 1.0f, 0.0f ), 0xffffffff );
		}

		pass InterpolateInstancedDepthVSSingleStrand_LOAD
		{
			SetVertexShader(CompileShader(vs_4_0, InterpolateVSSingleStrandDepthShadows_LOAD()));
			SetGeometryShader(CompileShader(gs_4_0, InterpolateGSDepthShadows()));
			SetPixelShader(CompileShader(ps_4_0, RenderDepthPSSmall()));
			SetDepthStencilState(DepthTest, 0);
			SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
			SetRasterizerState(SolidNoCull);
		} 
		pass InterpolateInstancedDepthVSSingleStrand_LOAD_DOM
		{
			SetVertexShader(CompileShader(vs_4_0, InterpolateVSSingleStrandDepthShadows_LOAD()));
			SetGeometryShader(CompileShader(gs_4_0, InterpolateGSDepthShadows()));
			SetPixelShader(CompileShader(ps_4_0, RenderDepthPSSmall_DOM()));
			SetDepthStencilState(NoDepthStencilTest, 0);
			SetRasterizerState(SolidNoCull);
			SetBlendState( BlendingAdd_BS, float4( 1.0f, 1.0f, 1.0f, 0.0f ), 0xffffffff );
		} 
			
		pass VisualizeShadowMap
		{
			SetVertexShader( CompileShader( vs_4_0, FullScreenTriVS() ) );
			SetGeometryShader( NULL );
			SetPixelShader( CompileShader( ps_4_0, VisDepthsPS() ) );
			SetRasterizerState(SolidNoCull);
			SetDepthStencilState(NoDepthStencilTest, 0);
			SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );		
		}
		
		pass copyTexture
		{
			SetVertexShader( CompileShader( vs_4_0, FullScreenTriVS() ) );
			SetGeometryShader( NULL );
			SetPixelShader( CompileShader( ps_4_0, CopyTexturePS() ) );
			SetRasterizerState(SolidNoCull);
			SetDepthStencilState(NoDepthStencilTest, 0);
			SetBlendState( NoBlendingJustAlphaWrite, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );	 //TEMP SARAH! set write mask to just be the alpha channel!	 
		}
		
		pass AllNulls
		{
			SetVertexShader(NULL);
			SetHullShader(NULL);
			SetDomainShader(NULL);
			SetGeometryShader(NULL);
			SetPixelShader(NULL);
		}*/
	}
}
/*
technique10 RenderMesh
{
    pass RenderWithoutShadows
    {
        SetVertexShader(CompileShader(vs_4_0, MeshVS()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, MeshPS()));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTestOnly, 0);
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
    pass RenderWithShadows
    {
        SetVertexShader(CompileShader(vs_4_0, MeshVSShadows()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, MeshPSShadows()));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTestOnly, 0);
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
    pass RenderMeshDepthPass
    {
        SetVertexShader(CompileShader(vs_4_0, MeshVS()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, MeshPS()));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTest, 0);
        SetBlendState( NoColorWrite, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }
}


technique10 RenderPlane
{
    pass RenderPlaneWithShadows
    {
        SetVertexShader(CompileShader(vs_4_0, VSDrawPlane()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, PSDrawPlane(true)));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTest, 0);
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        
    }  
    pass RenderPlaneWithoutShadows
    {
        SetVertexShader(CompileShader(vs_4_0, VSDrawPlane()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, PSDrawPlane(false)));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTest, 0);
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        
    }  
}



technique10 RenderMeshDepth
{
    pass
    {
        SetVertexShader(CompileShader(vs_4_0, MeshDepthVS()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, MeshDepthPS()));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTest, 0);
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
    }  
}

technique10 RenderMeshDepth_DOM
{
    pass
    {
        SetVertexShader(CompileShader(vs_4_0, MeshDepthVS()));
        SetGeometryShader(0);
        SetPixelShader(CompileShader(ps_4_0, MeshDepthPS_DOM()));
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(NoDepthStencilTest, 0);
        SetBlendState( BlendingAdd_BS, float4( 1.0f, 1.0f, 1.0f, 0.0f ), 0xffffffff );
    }  
}



technique10 RenderArrow
{
    pass P0
    {
        SetVertexShader(    CompileShader( vs_4_0,VSArrow()      ) ); 
        SetGeometryShader(  NULL                                   );
        SetPixelShader(     CompileShader( ps_4_0,PSArrow()      ) );
        
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetRasterizerState(SolidNoCull);
        SetDepthStencilState(DepthTest, 0);        
    }
}



technique10 DrawTexture
{
    pass
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_GRID()          ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_DRAW_TEXTURE()  ));

        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }
    pass drawCollisionsTexture
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_COLLISIONS()          ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_DRAW_COLLISIONS_TEXTURE()  ));
        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }
    pass ResolveSuperSample
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_COLLISIONS()          ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_RESOLVE_SUPERSAMPLE()  ));

        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }
    pass ReconstructDepth
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_COLLISIONS()         ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_RECONSTRUCT_DEPTH()  ));
        
        SetBlendState( NoColorWrite, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( DepthWriteOnly, 0 );
        
        //SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        //SetDepthStencilState( NoDepthStencilTest, 0 );
    }
    
        
}

technique10 DrawTextureDemuxed
{
    pass
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_GRID()          ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_DRAW_TEXTURE_DEMUX()  ));

        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }
}

technique10 TextureDemux
{
    pass
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_GRID()          ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_DEMUX()         ));

        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }
}

technique10 VoxelizeObstacles
{
    pass
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_GRID()          ));
        SetGeometryShader( NULL );
        SetPixelShader( CompileShader( ps_4_0,  PS_VOXELIZE_OBSTACLES()         ));

        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }
}

technique10 DemuxTo3DFluidObstacles
{
    pass
    {
        SetVertexShader(CompileShader( vs_4_0,  VS_GRID_FLUIDSIM()              ));
        SetGeometryShader( CompileShader( gs_4_0,  GS_ARRAY()                   ));
        SetPixelShader( CompileShader( ps_4_0,  PS_DEMUX_TO_3D_OBSTACLE_TEX()   ));

        SetBlendState( NoBlending, float4( 0.0f, 0.0f, 0.0f, 0.0f ), 0xFFFFFFFF );
        SetDepthStencilState( NoDepthStencilTest, 0 );
    }

}
*/