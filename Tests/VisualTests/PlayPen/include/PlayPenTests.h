/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2009 Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
*/

#ifndef __PlayPenTests_H__
#define __PlayPenTests_H__

#include "VisualTest.h"
#include "SamplePlugin.h"

using namespace Ogre;

//---------------------------------------------------------------------------
/** Test of manual LOD */
class _OgreSampleClassExport PlayPen_ManualLOD : public VisualTest
{
public:

    PlayPen_ManualLOD();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    String getLODMesh();

    AnimationState* mAnimation;

};

//---------------------------------------------------------------------------
/** Test of Manual LOD from a file */
class _OgreSampleClassExport PlayPen_ManualLODFromFile : public PlayPen_ManualLOD
{
public:

    PlayPen_ManualLODFromFile();

protected:

    String getLODMesh();

};

//---------------------------------------------------------------------------
/** Test of Manual Blending */
class _OgreSampleClassExport PlayPen_ManualBlend : public VisualTest
{
public:

    PlayPen_ManualBlend();

protected:

    void setupContent();

};

//---------------------------------------------------------------------------
/** Testing sphere projection */
class _OgreSampleClassExport PlayPen_ProjectSphere : public VisualTest
{
public:

    PlayPen_ProjectSphere();
    bool frameStarted(const FrameEvent& evt);

protected:

    Sphere* mProjectionSphere;
    ManualObject* mScissorRect;
    void setupContent();

};

//---------------------------------------------------------------------------
/** Testing setting the camera's direction */
class _OgreSampleClassExport PlayPen_CameraSetDirection : public VisualTest
{
public:

    PlayPen_CameraSetDirection();
    void buttonHit(OgreBites::Button* button);
    void checkBoxToggled(OgreBites::CheckBox* box);

protected:

    bool mUseParentNode;
    bool mUseFixedYaw;
    SceneNode* mParentNode;
    Vector3 mFocus;
    void setupContent();
    void toggleParentNode();
    void toggleFixedYaw();
    void track();

};

//---------------------------------------------------------------------------
/** Testing morph animation with normals */
class _OgreSampleClassExport PlayPen_MorphAnimationWithNormals : public VisualTest
{
public:

    PlayPen_MorphAnimationWithNormals();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    AnimationState* mAnimations[2];

};

//---------------------------------------------------------------------------
/** Testing morph animation without normals */
class _OgreSampleClassExport PlayPen_MorphAnimationWithoutNormals : public VisualTest
{
public:

    PlayPen_MorphAnimationWithoutNormals();
    bool frameStarted(const FrameEvent& evt);
    
protected:

    void setupContent();
    AnimationState* mAnimations[2];

};

//---------------------------------------------------------------------------
/** Testing pose animation with normals */
class _OgreSampleClassExport PlayPen_PoseAnimationWithNormals : public VisualTest
{
public:

    PlayPen_PoseAnimationWithNormals();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    AnimationState* mAnimations[2];

};

//---------------------------------------------------------------------------
/** Testing pose animation without normals */
class _OgreSampleClassExport PlayPen_PoseAnimationWithoutNormals : public VisualTest
{
public:

    PlayPen_PoseAnimationWithoutNormals();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    AnimationState* mAnimations[2];

};
//
//---------------------------------------------------------------------------
/** Testing scene node tracking */
class _OgreSampleClassExport PlayPen_SceneNodeTracking : public VisualTest
{
public:

	PlayPen_SceneNodeTracking();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
	AnimationState* mAnimState;

};
//---------------------------------------------------------------------------

// forward declare, but don't define yet to keep this header clean
class StencilOpQueueListener;

/** Testing stencil glow effects */
class _OgreSampleClassExport PlayPen_StencilGlow : public VisualTest
{
public:

	PlayPen_StencilGlow();
	virtual ~PlayPen_StencilGlow();

protected:

    void setupContent();
	StencilOpQueueListener* mStencilListener;

};
//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualLoader : public VisualTest
{
public:

	PlayPen_ManualLoader();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MRTCompositorScript : public VisualTest
{
public:

	PlayPen_MRTCompositorScript();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_NormalMapMirroredUVs : public VisualTest
{
public:

	PlayPen_NormalMapMirroredUVs();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MaterialSerializer : public VisualTest
{
public:

	PlayPen_MaterialSerializer();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TransparencyMipMaps : public VisualTest
{
public:

	PlayPen_TransparencyMipMaps();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_CthNewBlending : public VisualTest
{
public:

	PlayPen_CthNewBlending();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Matrices : public VisualTest
{
public:

	PlayPen_Matrices();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BasicPlane : public VisualTest
{
public:

	PlayPen_BasicPlane();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Alpha : public VisualTest
{
public:

	PlayPen_Alpha();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Bsp : public VisualTest
{
public:

	PlayPen_Bsp();

	StringVector getRequiredPlugins()
	{
		StringVector names;
		names.push_back("BSP Scene Manager");
		return names;
	}

	void createSceneManager()
	{
		mSceneMgr = mRoot->createSceneManager("BspSceneManager");
	}

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Animation : public VisualTest
{
public:

	PlayPen_Animation();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_AnimationBlend : public VisualTest
{
public:

	PlayPen_AnimationBlend();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_GpuPrograms : public VisualTest
{
public:

	PlayPen_GpuPrograms();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Projection : public VisualTest
{
public:

	PlayPen_Projection();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MultiViewports : public VisualTest
{
public:

	PlayPen_MultiViewports();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------

class RefractionTextureListener;
class ReflectionTextureListener;

/** Tests reflection/refraction. */
class _OgreSampleClassExport PlayPen_Distortion : public VisualTest
{
public:

	PlayPen_Distortion();
	virtual ~PlayPen_Distortion();

protected:

	void setupContent();
	virtual void cleanupContent();

    RefractionTextureListener* mRefractionListener;
    ReflectionTextureListener* mReflectionListener;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_EdgeBuilderSingleIndexBufSingleVertexBuf : public VisualTest
{
public:

	PlayPen_EdgeBuilderSingleIndexBufSingleVertexBuf();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_EdgeBuilderMultiIndexBufSingleVertexBuf : public VisualTest
{
public:

	PlayPen_EdgeBuilderMultiIndexBufSingleVertexBuf();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_EdgeBuilderMultiIndexBufMultiVertexBuf : public VisualTest
{
public:

	PlayPen_EdgeBuilderMultiIndexBufMultiVertexBuf();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SkeletalAnimation : public VisualTest
{
public:

	PlayPen_SkeletalAnimation();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_PrepareShadowVolume : public VisualTest
{
public:

	PlayPen_PrepareShadowVolume();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_WindowedViewportMode : public VisualTest
{
public:

	PlayPen_WindowedViewportMode();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SubEntityVisibility : public VisualTest
{
public:

	PlayPen_SubEntityVisibility();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_AttachObjectsToBones : public VisualTest
{
public:

	PlayPen_AttachObjectsToBones();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Ortho : public VisualTest
{
public:

	PlayPen_Ortho();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_FallbackResourceGroup : public VisualTest
{
public:

	PlayPen_FallbackResourceGroup();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_GeneratedLOD : public VisualTest
{
public:

	PlayPen_GeneratedLOD();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ClearScene : public VisualTest
{
public:

	PlayPen_ClearScene();
	bool frameStarted(const Ogre::FrameEvent& evt);

protected:

	size_t mFramesElapsed;
	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_StencilShadows : public VisualTest
{
public:

	PlayPen_StencilShadows();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_StencilShadowsMixedOpSubMeshes : public VisualTest
{
public:

	PlayPen_StencilShadowsMixedOpSubMeshes();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_2Spotlights : public VisualTest
{
public:

	PlayPen_2Spotlights();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TextureShadows : public VisualTest
{
public:

	PlayPen_TextureShadows();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TextureShadowsCustomCasterMat : public PlayPen_TextureShadows
{
public:

	PlayPen_TextureShadowsCustomCasterMat();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TextureShadowsCustomReceiverMat : public PlayPen_TextureShadows
{
public:

	PlayPen_TextureShadowsCustomReceiverMat();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_CompositorTextureShadows : public VisualTest
{
public:

	PlayPen_CompositorTextureShadows();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_CompositorTechniqueSwitch : public VisualTest
{
public:

	PlayPen_CompositorTechniqueSwitch();
	bool frameStarted(const FrameEvent& evt);

protected:

	void setupContent();
	void cleanupContent();

	CompositorInstance* mCompositorToSwitch;
	size_t mCompositorIndex;
	Real mTimeUntilNextToggle;
	StringVector mCompositorSchemeList;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_OverlayZOrder : public VisualTest
{
public:

	PlayPen_OverlayZOrder();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_IntersectionSceneQuery : public VisualTest
{
public:

	PlayPen_IntersectionSceneQuery();
	bool frameStarted(const FrameEvent& evt);

protected:

	void setupContent();
	IntersectionSceneQuery* intersectionQuery;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_RaySceneQuery : public VisualTest
{
public:

	PlayPen_RaySceneQuery();
	bool frameStarted(const FrameEvent& evt);

protected:

	void setupContent();
	RaySceneQuery* rayQuery;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_LotsAndLotsOfEntities : public VisualTest
{
public:

	PlayPen_LotsAndLotsOfEntities();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SimpleMesh : public VisualTest
{
public:

	PlayPen_SimpleMesh();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_GLSLTangent : public VisualTest
{
public:

	PlayPen_GLSLTangent();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_InfiniteAAB : public VisualTest
{
public:

	PlayPen_InfiniteAAB();

	StringVector getRequiredPlugins()
	{
		StringVector names;
		names.push_back("BSP Scene Manager");
		return names;
	}

	void createSceneManager()
	{
		mSceneMgr = mRoot->createSceneManager("BspSceneManager");
	}

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_2Windows : public VisualTest
{
public:

	PlayPen_2Windows();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_StaticGeometry : public VisualTest
{
public:

	PlayPen_StaticGeometry();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_StaticGeometryWithLOD : public VisualTest
{
public:

	PlayPen_StaticGeometryWithLOD();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ReloadResources : public VisualTest
{
public:

	PlayPen_ReloadResources();
	bool frameStarted(const FrameEvent& evt);

protected:

	void setupContent();
	Real mReloadTimer;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BillboardTextureCoords : public VisualTest
{
public:

	PlayPen_BillboardTextureCoords();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_RadixSort : public VisualTest
{
public:

	PlayPen_RadixSort();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_PoseAnimation2 : public VisualTest
{
public:

	PlayPen_PoseAnimation2();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ReflectedBillboards : public VisualTest
{
public:

	PlayPen_ReflectedBillboards();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObjectNonIndexed : public VisualTest
{
public:

	PlayPen_ManualObjectNonIndexed();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObjectNonIndexedUpdateSmaller : public PlayPen_ManualObjectNonIndexed
{
public:

	PlayPen_ManualObjectNonIndexedUpdateSmaller();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObjectNonIndexedUpdateLarger : public PlayPen_ManualObjectNonIndexed
{
public:

	PlayPen_ManualObjectNonIndexedUpdateLarger();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObjectIndexed : public VisualTest
{
public:

	PlayPen_ManualObjectIndexed();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObjectIndexedUpdateSmaller : public PlayPen_ManualObjectIndexed
{
public:

	PlayPen_ManualObjectIndexedUpdateSmaller();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObjectIndexedUpdateLarger : public PlayPen_ManualObjectIndexed
{
public:

	PlayPen_ManualObjectIndexedUpdateLarger();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BillboardChain : public VisualTest
{
public:

	PlayPen_BillboardChain();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_CubeDDS : public VisualTest
{
public:

	PlayPen_CubeDDS();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Dxt1 : public VisualTest
{
public:

	PlayPen_Dxt1();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Dxt1FromMemory : public VisualTest
{
public:

	PlayPen_Dxt1FromMemory();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Dxt1Alpha : public VisualTest
{
public:

	PlayPen_Dxt1Alpha();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Dxt3 : public VisualTest
{
public:

	PlayPen_Dxt3();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Dxt3FromMemory : public VisualTest
{
public:

	PlayPen_Dxt3FromMemory();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Dxt5 : public VisualTest
{
public:

	PlayPen_Dxt5();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Float64DDS : public VisualTest
{
public:

	PlayPen_Float64DDS();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Float128DDS : public VisualTest
{
public:

	PlayPen_Float128DDS();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Float16DDS : public VisualTest
{
public:

	PlayPen_Float16DDS();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Float32DDS : public VisualTest
{
public:

	PlayPen_Float32DDS();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_4bppPVR : public VisualTest
{
public:

	PlayPen_4bppPVR();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_4bppAlphaPVR : public VisualTest
{
public:

	PlayPen_4bppAlphaPVR();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_2bppPVR : public VisualTest
{
public:

	PlayPen_2bppPVR();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_2bppAlphaPVR : public VisualTest
{
public:

	PlayPen_2bppAlphaPVR();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_RibbonTrail : public VisualTest
{
public:

	PlayPen_RibbonTrail();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ExportPrecompiledAssemblerProgram : public VisualTest
{
public:

	PlayPen_ExportPrecompiledAssemblerProgram();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Material : public VisualTest
{
public:

	PlayPen_Material();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BlendDiffuseColour : public VisualTest
{
public:

	PlayPen_BlendDiffuseColour();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SplitPassesTooManyTexUnits : public VisualTest
{
public:

	PlayPen_SplitPassesTooManyTexUnits();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_CustomProjectionMatrix : public PlayPen_LotsAndLotsOfEntities
{
public:

	PlayPen_CustomProjectionMatrix();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_PointSprites : public VisualTest
{
public:

	PlayPen_PointSprites();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SuppressedShadows : public VisualTest
{
public:

	PlayPen_SuppressedShadows();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ViewportNoShadows : public VisualTest
{
public:

	PlayPen_ViewportNoShadows();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SerialisedColour : public VisualTest
{
public:

	PlayPen_SerialisedColour();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BillboardAccurateFacing : public VisualTest
{
public:

	PlayPen_BillboardAccurateFacing();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MultiSceneManagersSimple : public VisualTest
{
public:

	PlayPen_MultiSceneManagersSimple();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MultiSceneManagersComplex : public VisualTest
{
public:

	PlayPen_MultiSceneManagersComplex();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualBoneMovement : public VisualTest
{
public:

	PlayPen_ManualBoneMovement();
	bool frameStarted(const FrameEvent& evt);

protected:

	void setupContent();
	Bone* mBone;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MaterialSchemes : public VisualTest
{
public:

	PlayPen_MaterialSchemes();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MaterialSchemesListener : public VisualTest
{
public:

	PlayPen_MaterialSchemesListener();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MaterialSchemesWithLOD : public VisualTest
{
public:

	PlayPen_MaterialSchemesWithLOD();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MaterialSchemesWithMismatchedLOD : public VisualTest
{
public:

	PlayPen_MaterialSchemesWithMismatchedLOD();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SkeletonAnimationOptimise : public VisualTest
{
public:

	PlayPen_SkeletonAnimationOptimise();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BuildTangentOnAnimatedMesh : public VisualTest
{
public:

	PlayPen_BuildTangentOnAnimatedMesh();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_VertexTexture : public VisualTest
{
public:

	PlayPen_VertexTexture();

	virtual Ogre::String getRequiredRenderSystem()
	{
		return "Direct3D9 Rendering Subsystem";
	}

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BackgroundLoadResourceGroup : public VisualTest
{
public:

	PlayPen_BackgroundLoadResourceGroup();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_OverlayRelativeMode : public VisualTest
{
public:

	PlayPen_OverlayRelativeMode();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BillboardOrigins : public VisualTest
{
public:

	PlayPen_BillboardOrigins();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_DepthBias : public VisualTest
{
public:

	PlayPen_DepthBias();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_StringTokenising : public VisualTest
{
public:

	PlayPen_StringTokenising();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TextureShadowsTransparentCaster : public VisualTest
{
public:

	PlayPen_TextureShadowsTransparentCaster();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TextureShadowsIntegrated : public VisualTest
{
public:

	PlayPen_TextureShadowsIntegrated();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TextureShadowsIntegratedPSSM : public VisualTest
{
public:

	PlayPen_TextureShadowsIntegratedPSSM();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_TimeCreateDestroyObject : public VisualTest
{
public:

	PlayPen_TimeCreateDestroyObject();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_LightScissoring : public VisualTest
{
public:

	PlayPen_LightScissoring();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_LightClipPlanes : public VisualTest
{
public:

	PlayPen_LightClipPlanes();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_LightClipPlanesMoreLights : public VisualTest
{
public:

	PlayPen_LightClipPlanesMoreLights();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_MRT : public VisualTest
{
public:

	PlayPen_MRT();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_16Textures : public VisualTest
{
public:

	PlayPen_16Textures();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SharedPtrBug : public VisualTest
{
public:

	PlayPen_SharedPtrBug();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SpotlightViewProj : public VisualTest
{
public:

	PlayPen_SpotlightViewProj();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualIlluminationStage : public VisualTest
{
public:

	PlayPen_ManualIlluminationStage();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ReinitialiseEntityAlteredMesh : public VisualTest
{
public:

	PlayPen_ReinitialiseEntityAlteredMesh();
	bool frameStarted(const FrameEvent& evt);

protected:

	void setupContent();
	
	Mesh* mUpdate;
	Real mTimer;

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_SRGBtexture : public VisualTest
{
public:

	PlayPen_SRGBtexture();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_NegativeScale : public VisualTest
{
public:

	PlayPen_NegativeScale();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Lod : public VisualTest
{
public:

	PlayPen_Lod();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_Bug : public VisualTest
{
public:

	PlayPen_Bug();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ManualObject2D : public VisualTest
{
public:

	PlayPen_ManualObject2D();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_ShadowLod : public VisualTest
{
public:

	PlayPen_ShadowLod();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_FarFromOrigin : public VisualTest
{
public:

	PlayPen_FarFromOrigin();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_GeometryShaders : public VisualTest
{
public:

	PlayPen_GeometryShaders();
	void testCapabilities(const Ogre::RenderSystemCapabilities* caps);

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_AlphaToCoverage : public VisualTest
{
public:

	PlayPen_AlphaToCoverage();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_LiSPSM : public VisualTest
{
public:

	PlayPen_LiSPSM();

protected:

	void setupContent();
	void cleanupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_BlitSubTextures : public VisualTest
{
public:

	PlayPen_BlitSubTextures();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests */
class _OgreSampleClassExport PlayPen_DepthShadowMap : public VisualTest
{
public:

	PlayPen_DepthShadowMap();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests simple image operations */
class _OgreSampleClassExport PlayPen_ImageCombine : public VisualTest
{
public:

	PlayPen_ImageCombine();

protected:

	void setupContent();

};

//------------------------------------------------------------------------------
/** Tests non-unique resource names in different resource groups */
class _OgreSampleClassExport PlayPen_NonUniqueResourceNames : public VisualTest
{
public:

	PlayPen_NonUniqueResourceNames();

protected:

	void setupContent();
	void createMeshEntity(String group, Vector3 pos);

};
//------------------------------------------------------------------------------

void addTextureDebugOverlay(const Ogre::String& texname, size_t i);
void addTextureDebugOverlay(Ogre::TexturePtr tex, size_t i);
void addTextureShadowDebugOverlay(size_t num, Ogre::SceneManager* mgr);
void clearDebugTextureOverlays();
void createRandomEntityClones(Entity* ent, size_t cloneCount, 
	const Vector3& min, const Vector3& max, SceneManager* mgr);

#endif
