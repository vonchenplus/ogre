/*
-----------------------------------------------------------------------------
This source file is part of OGRE
    (Object-oriented Graphics Rendering Engine)
For the latest info, see http://www.ogre3d.org/

Copyright (c) 2000-2009 Torus Knot Software Ltd

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-----------------------------------------------------------------------------
*/

#ifndef __PlayPenTests_H__
#define __PlayPenTests_H__

#include "VisualTest.h"
#include "SamplePlugin.h"

using namespace Ogre;

//---------------------------------------------------------------------------
/** Test of manual LOD */
class _OgreSampleClassExport PlayPen_ManualLOD : public VisualTest
{
public:

    PlayPen_ManualLOD();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    String getLODMesh();

    AnimationState* mAnimation;

};

//---------------------------------------------------------------------------
/** Test of Manual LOD from a file */
class _OgreSampleClassExport PlayPen_ManualLODFromFile : public PlayPen_ManualLOD
{
public:

    PlayPen_ManualLODFromFile();

protected:

    String getLODMesh();

};

//---------------------------------------------------------------------------
/** Test of Manual Blending */
class _OgreSampleClassExport PlayPen_ManualBlend : public VisualTest
{
public:

    PlayPen_ManualBlend();

protected:

    void setupContent();

};

//---------------------------------------------------------------------------
/** Testing sphere projection */
class _OgreSampleClassExport PlayPen_ProjectSphere : public VisualTest
{
public:

    PlayPen_ProjectSphere();
    bool frameStarted(const FrameEvent& evt);

protected:

    Sphere* mProjectionSphere;
    ManualObject* mScissorRect;
    void setupContent();

};

//---------------------------------------------------------------------------
/** Testing setting the camera's direction */
class _OgreSampleClassExport PlayPen_CameraSetDirection : public VisualTest
{
public:

    PlayPen_CameraSetDirection();
    void buttonHit(OgreBites::Button* button);
    void checkBoxToggled(OgreBites::CheckBox* box);

protected:

    bool mUseParentNode;
    bool mUseFixedYaw;
    SceneNode* mParentNode;
    Vector3 mFocus;
    void setupContent();
    void toggleParentNode();
    void toggleFixedYaw();
    void track();

};

//---------------------------------------------------------------------------
/** Testing morph animation with normals */
class _OgreSampleClassExport PlayPen_MorphAnimationWithNormals : public VisualTest
{
public:

    PlayPen_MorphAnimationWithNormals();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    AnimationState* mAnimations[2];

};

//---------------------------------------------------------------------------
/** Testing morph animation without normals */
class _OgreSampleClassExport PlayPen_MorphAnimationWithoutNormals : public VisualTest
{
public:

    PlayPen_MorphAnimationWithoutNormals();
    bool frameStarted(const FrameEvent& evt);
    
protected:

    void setupContent();
    AnimationState* mAnimations[2];

};

//---------------------------------------------------------------------------
/** Testing pose animation with normals */
class _OgreSampleClassExport PlayPen_PoseAnimationWithNormals : public VisualTest
{
public:

    PlayPen_PoseAnimationWithNormals();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    AnimationState* mAnimations[2];

};

//---------------------------------------------------------------------------
/** Testing pose animation without normals */
class _OgreSampleClassExport PlayPen_PoseAnimationWithoutNormals : public VisualTest
{
public:

    PlayPen_PoseAnimationWithoutNormals();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
    AnimationState* mAnimations[2];

};
//
//---------------------------------------------------------------------------
/** Testing scene node tracking */
class _OgreSampleClassExport PlayPen_SceneNodeTracking : public VisualTest
{
public:

	PlayPen_SceneNodeTracking();
    bool frameStarted(const FrameEvent& evt);

protected:

    void setupContent();
	AnimationState* mAnimState;

};

#endif
